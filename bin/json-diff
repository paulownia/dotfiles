#!/usr/bin/env node

// vim: set filetype=javascript:

/**
 * entry point
 */
function main() {
  // loading 2 JSON files
  const fs = require('fs');
  const path = require('path');
  const file1 = process.argv[2];
  const file2 = process.argv[3];
  if (!file1 || !file2) {
    console.error('Usage: json-diff <file1.json> <file2.json>');
    process.exit(1);
  }
  const json1 = JSON.parse(fs.readFileSync(path.resolve(file1), 'utf8'));
  const json2 = JSON.parse(fs.readFileSync(path.resolve(file2), 'utf8'));

  console.log(`--- ${file1}`);
  console.log(`+++ ${file2}`);

  const data = diff(json1, json2);
  writeDiff(data);
}

function diff(left, right, path = []) {
  // 両方nullのケースを除外しておく
  if (left === null && right === null) {
    return []; // no difference
  }

  // 片方がnullの場合、または型が異なる場合
  if (left === null || right === null || typeof left !== typeof right) {
    return [{
      type: 'type',
      path: path,
      lhs: left,
      rhs: right,
    }];
  }

  // 両方がプリミティブ値の場合
  if (typeof left !== 'object' && typeof right !== 'object') {
    if (left !== right) {
      return [{
        type: 'value',
        path: path,
        lhs: left,
        rhs: right,
      }];
    }
    return []; // no difference
  }

  // この時点で両方ともオブジェクトまたは配列であることが保証されている

  // if both are arrays
  if (Array.isArray(left) && Array.isArray(right)) {
    return arrayDiff(left, right, path);
  }

  // if both are not arrays, but one is an array
  if (Array.isArray(left) || Array.isArray(right)) {
    return [{
      type: 'type',
      path: path,
      lhs: left,
      rhs: right,
    }];
  }

  // この時点で両方ともオブジェクトであることが保証されている
  return objectDiff(left, right, path);
}


function arrayDiff(left, right, path) {
  // 配列の比較は完全一致するかどうか判定
  if (left.length !== right.length) {
    return [{
      type: 'length',
      path: path,
      lhs: left,
      rhs: right,
    }];
  }

  // 配列の要素を順番に比較
  // 要素の比較は再帰的に行う
  const diffs = [];
  for (let i = 0; i < left.length; i++) {
    const elementDiffs = diff(left[i], right[i], [...path, i]);
    diffs.push(...elementDiffs);
  }

  return diffs;
}


function objectDiff(left, right, path) {
  // オブジェクトのキーを比較
  const diffs = [];
  const leftKeys = Object.keys(left);
  const rightKeys = Object.keys(right);

  // キーの存在チェック
  for (const key of leftKeys) {
    if (!right.hasOwnProperty(key)) {
      diffs.push({
        type: 'delete',
        path: [...path, key],
        lhs: left[key],
        rhs: undefined,
      });
    } else {
      const elementDiffs = diff(left[key], right[key], [...path, key]);
      diffs.push(...elementDiffs);
    }
  }
  // 右側にのみ存在するキーのチェック
  // これは追加されたキーを検出するため
  // 右側のキーをループして、左側に存在しないものを探す
  for (const key of rightKeys) {
    if (!left.hasOwnProperty(key)) {
      diffs.push({
        type: 'add',
        path: [...path, key],
        lhs: undefined,
        rhs: right[key],
      });
    }
  }
  return diffs;
}

function writeDiff(data) {
  for (const diff of data) {
    // pathは["a", "b", "c"]のような形式、これを .a.b.c に変換、先頭に "." を付ける。これはJQのパス形式に合わせるため
    console.log(`@ ${toPathJqQuery(diff.path)}`);
    if (diff.lhs !== undefined) console.log(`- ${JSON.stringify(diff.lhs, null, 0)}`);
    if (diff.rhs !== undefined) console.log(`+ ${JSON.stringify(diff.rhs, null, 0)}`);
  }
}

function toPathJqQuery(path) {
  // ["a", "b", "c"] -> .a.b.c
  // ["a", 0, "c"] -> .a[0].c
  // [""]  // -> .
  // [0]   // -> [0]
  if (path.length === 0) return '.';
  return path.map((p) => {
    if (typeof p === 'number') {
      return `[${p}]`; // 数字の場合は配列インデックス形式
    }
    return `.${p}`; // 文字列の場合はドット形式
  }).join('');
}

main();
