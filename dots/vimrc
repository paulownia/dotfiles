if filereadable('$VIMRUNTIME/defaults.vim')
  source $VIMRUNTIME/defaults.vim
endif

call plug#begin('~/.vim/plugged')
Plug 'mattn/emmet-vim'										" Ctrl-y -> , on ins-mode
Plug 'tpope/vim-fugitive'
Plug 'preservim/tagbar'									" t on nor-mode
Plug 'tpope/vim-rails', { 'for': 'ruby' }
Plug 'kien/ctrlp.vim'										" Ctrl-p on nor-mode
Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
Plug 'thinca/vim-quickrun', { 'on': 'QuickRun' }
Plug 'vim-scripts/sudo.vim'									" open a file follow command `vim sudo:/etc/passwd`
Plug 'heavenshell/vim-jsdoc', { 'for': 'javascript' }
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'AndrewRadev/switch.vim'								" gs on nor-mode
Plug 'evanleck/vim-svelte', {'branch': 'main'}
Plug 'dense-analysis/ale'

" Plug 'derekwyatt/vim-scala', { 'for': 'scala' }
" Plug 'moll/vim-node'
" Plug 'digitaltoad/vim-pug'
" Plug 'hashivim/vim-terraform'
" Plug 'rhysd/vim-crystal'
" Plug 'elixir-lang/vim-elixir'

Plug 'github/copilot.vim'


if has('nvim')
  Plug 'terrortylor/nvim-comment'

  " nvim tree (type `T` on nor-mode)
  Plug 'nvim-tree/nvim-web-devicons'
  Plug 'nvim-tree/nvim-tree.lua'

  " color scheme for nvim
  Plug 'EdenEast/nightfox.nvim'

  " statusline
  Plug 'nvim-lualine/lualine.nvim'
else
  Plug 'tomtom/tcomment_vim'									" gcc on nor-mode, gc with selection on vis-mode

  " search status (nvim has the feature of anzu)
  Plug 'osyo-manga/vim-anzu'									" * or # on search word on nor-mode

  " statusline
  Plug 'itchyny/lightline.vim'
endif

call plug#end()

" ライン番号
" set number

" スクロール
set scrolloff=4

" タブ幅
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2

" スワップファイル、バックアップを作らない
set nobackup
set noswapfile
set nowritebackup

" ステータス行
set laststatus=2
"set statusline=%f%m%r%h%w\ %{fugitive#statusline()}\ (%Y)%=\ %l/%L

if v:version >= 800
  " 8進数インクリメントの設定を解除
  set nrformats=bin,hex

  " 折り返し表示オプション
  set linebreak
  set showbreak=>
  set breakindent
  set breakindentopt=shift:6,sbr

  " 絵文字を全角幅で表示
  set emoji
else
  " 8進数インクリメントの設定を解除
  set nrformats=hex

  " 折り返ししない
  set nowrap
endif

" 検索
set hlsearch
set ignorecase
set smartcase
set incsearch

" コマンド補完
set wildmenu
set wildmode=longest:full,full

" CJK記号の幅調整（iTermでは Profile > Text > Double-Width Characters > Treat ambiguous-width characters as double widthのチェックも必要）
set ambiwidth=double

" 折りたたみ
"set foldmethod=indent
"set foldlevel=0
"set foldnestmax=1

" カーソルに下線（動作が重くなるので解除）
" set cursorline

" モードライン
set modeline
set modelines=5

" deleteキー操作
set backspace=start,eol,indent

" yankをclipboardへ
if has('nvim')
  set clipboard=unnamedplus
else
  set clipboard=unnamed,autoselect
endif

" diffopt追加、デフォルト縦分割にする
set diffopt+=vertical

" シンタックスハイライト
syntax on

" ファイルタイプ検出を有効化
filetype plugin indent on

" 数値インクリメント(Ctrl-a)をCtrl-jに変更
" 数値デクリメント(Ctrl-x)をCtrl-kに変更
nnoremap <C-j> <C-x>
nnoremap <C-k> <C-a>
nnoremap <C-x> <Nop>

" 行頭、行末移動をbashと同じに
nnoremap <C-a> 0
nnoremap <C-e> $

inoremap <C-a> <Home>
inoremap <C-e> <End>

" vertical diffsplit
nnoremap vd :vertical diffsplit

" 選択範囲の小文字化/大文字化を無効化
vnoremap u <Nop>
vnoremap U <Nop>

" vimdiff color
hi! DiffAdd      ctermbg=19
hi! DiffDelete   ctermbg=52
hi! DiffChange   ctermbg=22
hi! DiffText     ctermbg=57

" completion menu color
hi! Pmenu ctermbg=0 ctermfg=15
hi! PmenuSel ctermbg=21 ctermfg=15
hi! PmenuSbar ctermbg=8
hi! PmenuThumb ctermfg=4

" search color
hi! Search ctermbg=58 ctermfg=15

augroup vimrc
  autocmd!
  " auto trim
  autocmd BufWritePre * :%s/\s\+$//ge
augroup END

if has('conceal')
  set conceallevel=2 concealcursor=nvc
endif

" mapping typo :Wq, :Q to :wq, :q
command -bang Q q<bang>
command -bang W w<bang>
command -bang Wq wq<bang>
command -bang WQ wq<bang>

"" --- Tagbar
nnoremap t :TagbarToggle<CR>
let g:tagbar_type_javascript = {
\    'ctagtype': 'JavaScript',
\    'kinds': [
\      'c:classes',
\      'm:methods',
\      'f:functions',
\      't:testcase',
\      'd:describe'
\    ]
\  }

let g:tagbar_type_go = {
\  'ctagstype' : 'go',
\  'kinds'     : [
\     'p:package',
\     'i:imports:1',
\     'c:constants',
\     'v:variables',
\     't:types',
\     'n:interfaces',
\     'w:fields',
\     'e:embedded',
\     'm:methods',
\     'r:constructor',
\     'f:functions'
\   ],
\   'sro' : '.',
\   'kind2scope' : {
\     't' : 'ctype',
\     'n' : 'ntype'
\   },
\   'scope2kind' : {
\     'ctype' : 't',
\     'ntype' : 'n'
\   },
\     'ctagsbin'  : 'gotags',
\    'ctagsargs' : '-sort -silent'
\ }


"" --- vim-anzu
if exists("g:loaded_anzu")
  " mapping
  nmap n <Plug>(anzu-n-with-echo)
  nmap N <Plug>(anzu-N-with-echo)
  nmap * <Plug>(anzu-star-with-echo)
  nmap # <Plug>(anzu-sharp-with-echo)
  " clear status
  nmap <Esc><Esc> <Plug>(anzu-clear-search-status)
endif

"" --- QuickRun
" typescriptをbun runで実行
let g:quickrun_config = {
\   'typescript' : {
\     'exec' : 'bun run %s',
\   },
\   'python' : {
\     'exec' : 'python3 %s',
\   }
\}
" 結果を上下分割で表示
let g:quickrun_config._ = {
\   'outputter/buffer/split' : ':botright 12sp',
\   'outputter/buffer/close_on_empty' : 1
\}


"" --- lightline
let g:lightline = {
\    'colorscheme': 'wombat',
\    'active': {
\      'left': [
\        [ 'mode', 'paste' ],
\        [ 'filename', 'fugitive', 'readonly', 'modified']
\      ]
\    },
\    'component': {
\      'fugitive': '%{FugitiveStatusline()}'
\    },
\    'component_visible_condition': {
\      'fugitive': 'g:loaded_fugitive'
\    }
\  }

"" --- ale
" let g:ale_linters_explicit = 1
nmap <silent> ]w <Plug>(ale_next_wrap)
nmap <silent> [w <Plug>(ale_previous_wrap)

let g:ale_linters = {
\   'javascript': ['eslint'],
\   'json': ['jsonlint'],
\   'ruby': ['rubocop'],
\   'html': ['htmlhint'],
\   'css': ['stylelint'],
\   'ansible': ['ansible_lint'],
\   'yaml': ['yamllint'],
\}

" use bundle exec rubocop
let g:ale_ruby_rubocop_executable = 'bundle'
let g:ale_ruby_rubocop_options = ''

" let g:ale_lint_on_text_changed = 'never'
" let g:ale_lint_on_insert_leave = '1'
let g:ale_lint_delay = 1500
highlight ALEError ctermbg=none cterm=underline,bold gui=underline,bold
highlight ALEWarning ctermbg=none cterm=underline gui=underline
highlight ALEErrorSign ctermbg=236 ctermfg=160 guifg=#ff3333 guibg=#606060
highlight ALEWarningSign ctermbg=236 ctermfg=226 guifg=#ffff33 guibg=#606060

if filereadable(expand('~/.vimrc_local'))
  source ~/.vimrc_local
endif
